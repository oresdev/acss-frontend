// -----------------------------------------------------------------------------
// This file contains all application-wide Sass mixins.
// -----------------------------------------------------------------------------

@mixin _apply-props($args, $props...) {
   @for $i from 1 through length($args) {
      $val: nth($args, $i);

      @if $val != null {
         #{nth($props, $i)}: $val;
      }
   }
}

@mixin flex($args...) {
   @include _apply-props(
      $args,
      flex-direction,
      align-items,
      justify-content,
      flex-wrap
   );
   display: flex;
}

@mixin position($position, $args) {
   @each $o in top right bottom left {
      $i: index($args, $o);
      @if $i and
         $i +
         1 <=
         length($args) and
         type-of(nth($args, $i + 1)) ==
         number
      {
         #{$o}: nth($args, $i + 1);
      }
   }
   position: $position;
}

// Positioning helpers
@mixin absolute($args: '') {
   @include position(absolute, $args);
}

@mixin fixed($args: '') {
   @include position(fixed, $args);
}

@mixin relative($args: '') {
   @include position(relative, $args);
}

/*
---
Sass mixin for responsive margins and paddings

Play around and add some properties.
Example: @include responsive-spacing(margin, top bottom);
---
 */

@mixin responsive-spacing($spacingType, $properties: top right bottom left) {
   // Error handling
   @if (($spacingType == margin) or ($spacingType == padding)) {
      // Comma separated list with media features and related spacing width (use your own variables here)
      $responsiveSpacesList: ('(max-width: 598px)', 16px),
         ('(min-width: 599px) and (max-width: 840px)', 20px),
         ('(min-width: 841px)', 20px);

      // Loop through each item of $responsiveSpacesList
      @each $mediaFeature, $spacingValue in $responsiveSpacesList {
         // Set media query and trim surrounding brackets
         @media screen and (str-slice($mediaFeature, 2, -2)) {
            // Space separated list of possible direction arguments
            $directions: top right bottom left;

            // Loop through each item of $directions
            @each $direction in $directions {
               // Return index number when a direction was found in properties
               $i: index($properties, $direction);

               // If index is given, set css property and value
               @if $i {
                  #{$spacingType}-#{$direction}: $spacingValue;
               }
            }
         }
      }
   } @else {
      @error "Invalid spacing type. Please use 'margin' or 'padding'";
   }
}

.responsive__margin {
   @include responsive-spacing(margin);
}

.responsive__padding {
   @include responsive-spacing(padding);
}

@mixin breakpoints($size) {
   @if $size == phone {
      @media (max-width: 599px) {
         @content;
      }
   } @else if $size == tablet {
      @media (max-width: 840px) {
         @content;
      }
   } @else if $size == desktop {
      @media (max-width: 1280px) {
         @content;
      }
   } @else if $size == retina {
      @media (min-width: 1800px) {
         @content;
      }
   }
}
